@page "/dialog-fields"
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Kanban
@using Newtonsoft.Json
@using System.Collections
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Data
@inject OrderService _craftService;
<SfKanban ID="Kanban" TValue="Order" KeyField="ShipCity">
    <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <KanbanColumns>
        <KanbanColumn HeaderText="Moscow" KeyField=@(new List<string>{"Moscow"}) AllowAdding=true></KanbanColumn>
        <KanbanColumn HeaderText="London" KeyField=@(new List<string>{"London"})></KanbanColumn>
        <KanbanColumn HeaderText="Singapore" KeyField=@(new List<string>{"Singapore"})></KanbanColumn>
    </KanbanColumns>
    <KanbanDialogSettings>
        <KanbanDialogSettingsFields>
            <KanbanDialogSettingsField Text="Ship City" Key="ShipCity" Type=DialogFieldType.DropDown></KanbanDialogSettingsField>
            <KanbanDialogSettingsField Text="Ship Name" Key="ShipName" Type=DialogFieldType.TextBox></KanbanDialogSettingsField>
            <KanbanDialogSettingsField Text="Employee ID" Key="EmployeeID" Type=DialogFieldType.TextBox></KanbanDialogSettingsField>
        </KanbanDialogSettingsFields>
    </KanbanDialogSettings>
    <KanbanCardSettings HeaderField="EmployeeID" ContentField="ShipName"></KanbanCardSettings>
</SfKanban>

@code {
    public class CustomAdaptor : DataAdaptor
    {
        OrderDataAccessLayer db = new OrderDataAccessLayer();
        public CustomAdaptor()
        {
        }
        public async override Task<object> ReadAsync(DataManagerRequest dm, string key = null)
        {
            OrderService _craftService = new OrderService();
            IEnumerable DataSource = await _craftService.GetOrdersAsync();
            int count = DataSource.Cast<Order>().Count();
            return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = count } : (object)DataSource;
        }
        // Performs BatchUpdate operation
        public override object BatchUpdate(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            if (Changed != null)
            {
                foreach (var rec in (IEnumerable<Order>)Changed)
                {
                    db.UpdateOrder(rec);
                }
            }
            if (Added != null)
            {
                foreach (var rec in (IEnumerable<Order>)Added)
                {
                    db.AddOrder((Order)rec);
                }
            }
            if (Deleted != null)
            {
                foreach (var rec in (IEnumerable<Order>)Deleted)
                {
                    db.DeleteOrder((Order)rec);
                }
            }
            return new { };
        }
    }

}